/*
 * This file is part of Cleanflight and Betaflight.
 *
 * Cleanflight and Betaflight are free software. You can redistribute
 * this software and/or modify this software under the terms of the
 * GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * Cleanflight and Betaflight are distributed in the hope that they
 * will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software.
 *
 * If not, see <http://www.gnu.org/licenses/>.
 */

#include <stdbool.h>
#include <stdint.h>
#include <math.h>

#include "filter.hpp"
//#include "common/utils.h"

//#include "config/feature.h"

//#include "sensors/acceleration_init.h"
//#include "sensors/boardalignment.h"
//#include "sensors/gyro.h"

#include "acceleration.hpp"
#include "sensor_alignment.hpp"
namespace bfimu {
acc_t acc;                       // acc access functions
matrix33_t rotationMatrix;
sensor_align_e accAlign = CW0_DEG;
static inline void alignAccelerometer(vector3_t *accADC)
{
    switch (accAlign) {
        case ALIGN_CUSTOM:
            alignSensorViaMatrix(accADC, &rotationMatrix);
            break;
        default:
            alignSensorViaRotation(accADC, accAlign);
            break;
    }
}
#define CALIBRATING_ACC_CYCLES              400
int bAccelCalibration = CALIBRATING_ACC_CYCLES;
bool bAccelCalibrationComplete = false;
int16_t raw[4];
uint16_t acc_1G;
uint16_t accLpfCutHz = 300;
uint16_t sampleRateHz = 1600;
pt2Filter_t accFilter[XYZ_AXIS_COUNT];
static void performAcclerationCalibration(/*rollAndPitchTrims_t *rollAndPitchTrims, */vector3_t* accADC)
{
    static int32_t a[3];

    for (int axis = 0; axis < 3; axis++) {

        // Reset a[axis] at start of calibration
        if (bAccelCalibration == CALIBRATING_ACC_CYCLES) {
            a[axis] = 0;
        }

        // Sum up CALIBRATING_ACC_CYCLES readings
        a[axis] += accADC[axis];

        // Reset global variables to prevent other code from using un-calibrated data
        accADC[axis] = 0;
        raw[axis] = 0;
    }

    if (bAccelCalibration == 1) {
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        raw[X] = (a[X] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
        raw[Y] = (a[Y] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
        raw[Z] = (a[Z] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - acc_1G;

        //resetRollAndPitchTrims(rollAndPitchTrims);
        bAccelCalibrationComplete = true;
    }

    bAccelCalibration--;
}

static inline void calibrateAccelerometer(void)
{
    if (bAccelCalibration > 0) {
        // acc.accADC is held at 0 until calibration is completed
        performAcclerationCalibration();
    }

    //if (featureIsEnabled(FEATURE_INFLIGHT_ACC_CAL)) {
    //    performInflightAccelerationCalibration(&accelerometerConfigMutable()->accelerometerTrims);
    //}
}

static inline void applyAccelerationTrims(vector3_t *accADC)
{
    accADC->x -= raw[X];
    accADC->y -= raw[Y];
    accADC->z -= raw[Z];
}
void accInitFilters(void)
{
    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    //accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig()->acc_lpf_hz : 0;
    if (accLpfCutHz) {
        const float k = pt2FilterGain(accLpfCutHz, HZ_TO_INTERVAL(sampleRateHz));
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
            pt2FilterInit(&accFilter[axis], k);
        }
    }
}
static inline void postProcessAccelerometer(vector3_t *accADC)
{
    static vector3_t accAdcPrev;

    for (unsigned axis = 0; axis < XYZ_AXIS_COUNT; axis++) {

        // Apply anti-alias filter for attitude task (if enabled)
        //if (axis == gyro.gyroDebugAxis) {
        //    DEBUG_SET(DEBUG_ACCELEROMETER, 0, lrintf(acc.accADC.v[axis]));
        //}

        if (accLpfCutHz) {
            accADC->v[axis] = pt2FilterApply(&accFilter[axis], accADC->v[axis]);
        }

        // Calculate derivative of acc (jerk)
        acc.jerk.v[axis] = (acc.accADC.v[axis] - accAdcPrev.v[axis]) * acc.sampleRateHz;
        accAdcPrev.v[axis] = acc.accADC.v[axis];

        //if (axis == gyro.gyroDebugAxis) {
        //    DEBUG_SET(DEBUG_ACCELEROMETER, 1, lrintf(acc.accADC.v[axis]));
        //    DEBUG_SET(DEBUG_ACCELEROMETER, 3, lrintf(acc.jerk.v[axis] * 1e-2f));
        //}
    }

    acc.accMagnitude = vector3Norm(&acc.accADC) * acc.dev.acc_1G_rec;
    acc.jerkMagnitude = vector3Norm(&acc.jerk) * acc.dev.acc_1G_rec;

    DEBUG_SET(DEBUG_ACCELEROMETER, 2, lrintf(acc.accMagnitude * 1e3f));
    DEBUG_SET(DEBUG_ACCELEROMETER, 4, lrintf(acc.jerkMagnitude * 1e3f));
}

void accUpdate(timeUs_t currentTimeUs)
{
    UNUSED(currentTimeUs);

    if (!acc.dev.readFn(&acc.dev)) {
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
        acc.accADC.v[axis] = acc.dev.ADCRaw[axis];
    }

    alignAccelerometer();
    calibrateAccelerometer();
    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
    postProcessAccelerometer();

    acc.isAccelUpdatedAtLeastOnce = true;
}
}